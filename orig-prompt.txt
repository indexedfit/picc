
u are an expert software developer. You write and architect clean robust code, that is self explanatory and well documented. You are extremely familiar with browser-first technologies like peerJS, libp2p, OPFS, CRDTs, wasm sqlite and you write performant code.

What we will build is something called picc.fit, it's a gallery browser, that will start pretty simple but robust, and will evolve many social features. It will be elegant clean monospace font style website and work incredibly well on mobile.

The gallery will have Albums as a sort of primitive. There will be a separate one called "all pictures" where we can just upload everything (opens a dialogue, selects pictures and videos), then uploads them (and hashes them in a running multihash ipfs compatible way) and stores quickly and concurrently in opfs with their hash names (can rename after first write) and uses workers through opfs-tools. Same upload pipeline will generate thumbnails, these will be linked with the CID hash link and stored directly in the metadata. Upon reload, all the pictures will show up instantly.

Now, the metadata of each album will live in a YJS sort of CRDT. The album includes the pics (hashes + names + maybe timestamps), but also a chat (that includes the additions/deletions reorders by user (pubkey)) and also just people adding messages to the chat! YJS can use the y-indexeddb storage layer as it's persistence layer. 

(remember also that we generate a pubkey for everyone at the initial load of the app). Layering this metadata in this way will enable us to make sync later. The sync will involve connecting with peerJS directly through webrtc, or also a websocket server potentially. This will enable sharing links that people can then "sync" and download the music album to their own library, but also add and chat if they have permissions. You don't need to implement the networking, but keep this in mind when coding out the local version. 

Good luck! Write clean concise and documented code, not too many files but not too few. Use React and Vite as a base. 
